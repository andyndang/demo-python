"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

from .sdkconfiguration import SDKConfiguration
from songbird import utils
from songbird.models import operations, shared
from typing import Optional

class DatasetProfile:
    sdk_configuration: SDKConfiguration

    def __init__(self, sdk_config: SDKConfiguration) -> None:
        self.sdk_configuration = sdk_config
        
    
    def create_reference_profile(self, request: operations.CreateReferenceProfileRequest, security: operations.CreateReferenceProfileSecurity) -> operations.CreateReferenceProfileResponse:
        r"""Returns data needed to uploading the reference profile
        Returns data needed to upload the reference profile. Supports uploading segmented reference profiles. 
                    If segments are omitted, provides data needed to upload a single reference profile. 
                    This replaces the deprecated LogReference operation.
        """
        base_url = utils.template_url(*self.sdk_configuration.get_server_details())
        
        url = utils.generate_url(operations.CreateReferenceProfileRequest, base_url, '/v0/organizations/{org_id}/dataset-profiles/models/{dataset_id}/reference-profile', request)
        headers = {}
        req_content_type, data, form = utils.serialize_request_body(request, "create_reference_profile_request", 'json')
        if req_content_type not in ('multipart/form-data', 'multipart/mixed'):
            headers['content-type'] = req_content_type
        if data is None and form is None:
            raise Exception('request body is required')
        headers['Accept'] = 'application/json'
        headers['user-agent'] = f'speakeasy-sdk/{self.sdk_configuration.language} {self.sdk_configuration.sdk_version} {self.sdk_configuration.gen_version} {self.sdk_configuration.openapi_doc_version}'
        
        client = utils.configure_security_client(self.sdk_configuration.client, security)
        
        http_res = client.request('POST', url, data=data, files=form, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.CreateReferenceProfileResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if True:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.CreateReferenceProfileResponse])
                res.create_reference_profile_response = out

        return res

    
    def delete_analyzer_results(self, request: operations.DeleteAnalyzerResultsRequest, security: operations.DeleteAnalyzerResultsSecurity) -> operations.DeleteAnalyzerResultsResponse:
        r"""Deletes a set of analyzer results
        Deletes a set of analyzer results. Returns false if scheduling deletion encountered some error.
        """
        base_url = utils.template_url(*self.sdk_configuration.get_server_details())
        
        url = utils.generate_url(operations.DeleteAnalyzerResultsRequest, base_url, '/v0/organizations/{org_id}/dataset-profiles/models/{dataset_id}/analyzer-results', request)
        headers = {}
        query_params = utils.get_query_params(operations.DeleteAnalyzerResultsRequest, request)
        headers['Accept'] = 'application/json'
        headers['user-agent'] = f'speakeasy-sdk/{self.sdk_configuration.language} {self.sdk_configuration.sdk_version} {self.sdk_configuration.gen_version} {self.sdk_configuration.openapi_doc_version}'
        
        client = utils.configure_security_client(self.sdk_configuration.client, security)
        
        http_res = client.request('DELETE', url, params=query_params, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.DeleteAnalyzerResultsResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if True:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.DeleteAnalyzerResultsResponse])
                res.delete_analyzer_results_response = out

        return res

    
    def delete_dataset_profiles(self, request: operations.DeleteDatasetProfilesRequest, security: operations.DeleteDatasetProfilesSecurity) -> operations.DeleteDatasetProfilesResponse:
        r"""Deletes a set of dataset profiles
        Deletes a set of dataset profiles. Returns false if scheduling deletion encountered some error.
        """
        base_url = utils.template_url(*self.sdk_configuration.get_server_details())
        
        url = utils.generate_url(operations.DeleteDatasetProfilesRequest, base_url, '/v0/organizations/{org_id}/dataset-profiles/models/{dataset_id}', request)
        headers = {}
        query_params = utils.get_query_params(operations.DeleteDatasetProfilesRequest, request)
        headers['Accept'] = 'application/json'
        headers['user-agent'] = f'speakeasy-sdk/{self.sdk_configuration.language} {self.sdk_configuration.sdk_version} {self.sdk_configuration.gen_version} {self.sdk_configuration.openapi_doc_version}'
        
        client = utils.configure_security_client(self.sdk_configuration.client, security)
        
        http_res = client.request('DELETE', url, params=query_params, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.DeleteDatasetProfilesResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if True:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.DeleteDatasetProfilesResponse])
                res.delete_dataset_profiles_response = out

        return res

    
    def delete_reference_profile(self, request: operations.DeleteReferenceProfileRequest, security: operations.DeleteReferenceProfileSecurity) -> operations.DeleteReferenceProfileResponse:
        r"""Delete a single reference profile
        Delete a a Reference Profile. Returns false if the deletion encountered some error.
        """
        base_url = utils.template_url(*self.sdk_configuration.get_server_details())
        
        url = utils.generate_url(operations.DeleteReferenceProfileRequest, base_url, '/v0/organizations/{org_id}/dataset-profiles/models/{model_id}/reference-profiles/{reference_id}', request)
        headers = {}
        headers['Accept'] = 'application/json'
        headers['user-agent'] = f'speakeasy-sdk/{self.sdk_configuration.language} {self.sdk_configuration.sdk_version} {self.sdk_configuration.gen_version} {self.sdk_configuration.openapi_doc_version}'
        
        client = utils.configure_security_client(self.sdk_configuration.client, security)
        
        http_res = client.request('DELETE', url, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.DeleteReferenceProfileResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if True:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[bool])
                res.delete_reference_profile_default_application_json_boolean = out

        return res

    
    def get_reference_profile(self, request: operations.GetReferenceProfileRequest, security: operations.GetReferenceProfileSecurity) -> operations.GetReferenceProfileResponse:
        r"""Returns a single reference profile
        Returns a Reference Profile.
        """
        base_url = utils.template_url(*self.sdk_configuration.get_server_details())
        
        url = utils.generate_url(operations.GetReferenceProfileRequest, base_url, '/v0/organizations/{org_id}/dataset-profiles/models/{model_id}/reference-profiles/{reference_id}', request)
        headers = {}
        headers['Accept'] = 'application/json'
        headers['user-agent'] = f'speakeasy-sdk/{self.sdk_configuration.language} {self.sdk_configuration.sdk_version} {self.sdk_configuration.gen_version} {self.sdk_configuration.openapi_doc_version}'
        
        client = utils.configure_security_client(self.sdk_configuration.client, security)
        
        http_res = client.request('GET', url, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.GetReferenceProfileResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if True:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.ReferenceProfileItemResponse])
                res.reference_profile_item_response = out

        return res

    
    def list_reference_profiles(self, request: operations.ListReferenceProfilesRequest, security: operations.ListReferenceProfilesSecurity) -> operations.ListReferenceProfilesResponse:
        r"""Returns a list for reference profiles
        Returns a list of Reference Profiles.
        """
        base_url = utils.template_url(*self.sdk_configuration.get_server_details())
        
        url = utils.generate_url(operations.ListReferenceProfilesRequest, base_url, '/v0/organizations/{org_id}/dataset-profiles/models/{model_id}/reference-profiles', request)
        headers = {}
        query_params = utils.get_query_params(operations.ListReferenceProfilesRequest, request)
        headers['Accept'] = 'application/json'
        headers['user-agent'] = f'speakeasy-sdk/{self.sdk_configuration.language} {self.sdk_configuration.sdk_version} {self.sdk_configuration.gen_version} {self.sdk_configuration.openapi_doc_version}'
        
        client = utils.configure_security_client(self.sdk_configuration.client, security)
        
        http_res = client.request('GET', url, params=query_params, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.ListReferenceProfilesResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if True:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[list[shared.ReferenceProfileItemResponse]])
                res.reference_profile_item_responses = out

        return res

    
    def list_segments(self, request: operations.ListSegmentsRequest, security: operations.ListSegmentsSecurity) -> operations.ListSegmentsResponse:
        r"""Returns a list of segments
        Returns a list of segments for the dataset.
        """
        base_url = utils.template_url(*self.sdk_configuration.get_server_details())
        
        url = utils.generate_url(operations.ListSegmentsRequest, base_url, '/v0/organizations/{org_id}/dataset-profiles/models/{model_id}/segments', request)
        headers = {}
        headers['Accept'] = 'application/json'
        headers['user-agent'] = f'speakeasy-sdk/{self.sdk_configuration.language} {self.sdk_configuration.sdk_version} {self.sdk_configuration.gen_version} {self.sdk_configuration.openapi_doc_version}'
        
        client = utils.configure_security_client(self.sdk_configuration.client, security)
        
        http_res = client.request('GET', url, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.ListSegmentsResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if True:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.SegmentListResponse])
                res.segment_list_response = out

        return res

    