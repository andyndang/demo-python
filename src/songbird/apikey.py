"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

from .sdkconfiguration import SDKConfiguration
from songbird import utils
from songbird.models import operations, shared
from typing import Optional

class APIKey:
    sdk_configuration: SDKConfiguration

    def __init__(self, sdk_config: SDKConfiguration) -> None:
        self.sdk_configuration = sdk_config
        
    
    def create_api_key(self, request: operations.CreateAPIKeyRequest, security: operations.CreateAPIKeySecurity) -> operations.CreateAPIKeyResponse:
        r"""Generate an API key for a user.
        Generates an API key for a given user. Must be called either by system administrator or by the user themselves
        """
        base_url = utils.template_url(*self.sdk_configuration.get_server_details())
        
        url = utils.generate_url(operations.CreateAPIKeyRequest, base_url, '/v0/organizations/{org_id}/api-key', request)
        headers = {}
        query_params = utils.get_query_params(operations.CreateAPIKeyRequest, request)
        headers['Accept'] = 'application/json'
        headers['user-agent'] = f'speakeasy-sdk/{self.sdk_configuration.language} {self.sdk_configuration.sdk_version} {self.sdk_configuration.gen_version}'
        
        client = utils.configure_security_client(self.sdk_configuration.client, security)
        
        http_res = client.request('POST', url, params=query_params, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.CreateAPIKeyResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if True:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.UserAPIKey])
                res.user_api_key = out

        return res

    
    def get_api_key(self, request: operations.GetAPIKeyRequest, security: operations.GetAPIKeySecurity) -> operations.GetAPIKeyResponse:
        r"""Get an api key by its id
        Get an api key by its id
        """
        base_url = utils.template_url(*self.sdk_configuration.get_server_details())
        
        url = utils.generate_url(operations.GetAPIKeyRequest, base_url, '/v0/organizations/{org_id}/api-key/{key_id}', request)
        headers = {}
        headers['Accept'] = 'application/json'
        headers['user-agent'] = f'speakeasy-sdk/{self.sdk_configuration.language} {self.sdk_configuration.sdk_version} {self.sdk_configuration.gen_version}'
        
        client = utils.configure_security_client(self.sdk_configuration.client, security)
        
        http_res = client.request('GET', url, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.GetAPIKeyResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if True:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.UserAPIKeyResponse])
                res.user_api_key_response = out

        return res

    
    def list_api_keys(self, request: operations.ListAPIKeysRequest, security: operations.ListAPIKeysSecurity) -> operations.ListAPIKeysResponse:
        r"""List API key metadata for a given organization and user
        Returns the API key metadata for a given organization and user
        """
        base_url = utils.template_url(*self.sdk_configuration.get_server_details())
        
        url = utils.generate_url(operations.ListAPIKeysRequest, base_url, '/v0/organizations/{org_id}/api-key', request)
        headers = {}
        query_params = utils.get_query_params(operations.ListAPIKeysRequest, request)
        headers['Accept'] = 'application/json'
        headers['user-agent'] = f'speakeasy-sdk/{self.sdk_configuration.language} {self.sdk_configuration.sdk_version} {self.sdk_configuration.gen_version}'
        
        client = utils.configure_security_client(self.sdk_configuration.client, security)
        
        http_res = client.request('GET', url, params=query_params, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.ListAPIKeysResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if True:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.ListUserAPIKeys])
                res.list_user_api_keys = out

        return res

    
    def revoke_api_key(self, request: operations.RevokeAPIKeyRequest, security: operations.RevokeAPIKeySecurity) -> operations.RevokeAPIKeyResponse:
        r"""Revoke the given API Key, removing its ability to access WhyLabs systems
        Revokes the given API Key
        """
        base_url = utils.template_url(*self.sdk_configuration.get_server_details())
        
        url = utils.generate_url(operations.RevokeAPIKeyRequest, base_url, '/v0/organizations/{org_id}/api-key', request)
        headers = {}
        query_params = utils.get_query_params(operations.RevokeAPIKeyRequest, request)
        headers['Accept'] = 'application/json'
        headers['user-agent'] = f'speakeasy-sdk/{self.sdk_configuration.language} {self.sdk_configuration.sdk_version} {self.sdk_configuration.gen_version}'
        
        client = utils.configure_security_client(self.sdk_configuration.client, security)
        
        http_res = client.request('DELETE', url, params=query_params, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.RevokeAPIKeyResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if True:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.UserAPIKey])
                res.user_api_key = out

        return res

    